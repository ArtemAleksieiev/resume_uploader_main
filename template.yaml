AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: S3 Uploader 

Metadata:
  AWS::ServerlessRepo::Application:
    Name: ResumeUploader
    Description: Serverless Backend for ResumeUploader
    Author: Artem Aleksieiev

Resources:
  # HTTP API
  MyApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      # CORS configuration - this is open for development only and should be restricted in prod.
      # See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapicorsconfiguration.html   
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - DELETE
          - OPTIONS
        AllowHeaders:
          - "*"   
        AllowOrigins: 
          - "*"      
      Tags:
        Application: ResumeUploader
  GetDataRequestFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: getData/
      Handler: app.handler
      Runtime: nodejs12.x
      Timeout: 3
      MemorySize: 128
      Environment:
        Variables:
          DbTable: !Ref DynamoTable  
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamoTable
      Events:
        UploadAssetAPI:
          Type: HttpApi
          Properties:
            Path: /
            Method: get
            ApiId: !Ref MyApi
            
      Tags:
        Application: ResumeUploader 

  PostDataFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: postData/
      Handler: app.handler
      Runtime: nodejs12.x
      Timeout: 3
      MemorySize: 128
      Environment:
        Variables:
          DbTable: !Ref DynamoTable  
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref DynamoTable
      Events:
        UploadAssetAPI:
          Type: HttpApi
          Properties:
            Path: /uploads
            Method: post
            ApiId: !Ref MyApi
            
      Tags:
        Application: ResumeUploader 
  UploadRequestFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: getSignedURL/
      Handler: app.handler
      Runtime: nodejs12.x
      Timeout: 3
      MemorySize: 128
      Environment:
        Variables:
          UploadBucket: !Ref S3UploadBucket  
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3UploadBucket
        ## This permission allows the Lambda function to request signed URLs
        ## for objects that will be publicly readable. Uncomment if you want this ACL.
        # - Statement:
        #   - Effect: Allow
        #     Resource: !Sub 'arn:aws:s3:::${S3UploadBucket}/'
        #     Action:
        #       - s3:putObjectAcl
      Events:
        UploadAssetAPI:
          Type: HttpApi
          Properties:
            Path: /uploads
            Method: get
            ApiId: !Ref MyApi

      Tags:
        Application: ResumeUploader 

  ## S3 bucket
  S3UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
          AllowedOrigins:
            - "*"
      Tags:
        - Key: "Application"
          Value: "ResumeUploader"

  DynamoTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: DynamoTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5  

## Take a note of the outputs for deploying the workflow templates in this sample application
Outputs:
  APIendpoint:
    Description: "HTTP API endpoint URL"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com"
  S3UploadBucketName:
    Description: "S3 bucket for application uploads"
    Value: !Ref 'S3UploadBucket'  
  GetDataRequestFunction:
    Value: !Ref GetDataRequestFunction
    Description: LambdaGetDynamoDB function  Arn
  PostDataFunction:
    Value: !Ref PostDataFunction
    Description: LambdaPostDynamoDB function  Arn
  DynamoDbTable:
    Value: !Ref DynamoTable
    Description: DynamoDb Table 